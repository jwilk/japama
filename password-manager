#!/usr/bin/env python3

# Copyright © 2012-2017 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import math
import os
import random
import re
import string
import subprocess as ipc
import sys
import textwrap

import yaml

def main():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()
    subparsers.dest = 'cmd'  # https://bugs.python.org/issue9253
    subparsers.required = True
    def add_command(command, *, help):
        name = re.sub('^do_', '', command.__name__)
        description = textwrap.dedent(command.__doc__)
        sp = subparsers.add_parser(name,
            help=help,
            formatter_class=argparse.RawDescriptionHelpFormatter,
            description=description,
        )
        sp.set_defaults(action=command)
        return sp
    c_show = add_command(do_show, help='show (some) passwords')
    c_show.add_argument('--omit', action='store_true', help='omit passwords')
    c_show.add_argument('--pick', metavar='N[,N...]', help='pick only some characters')
    c_show.add_argument('-x', '--x-clipboard', action='store_true', help='copy the password to clipboard')
    c_show.add_argument('keyword', metavar='KEYWORD')
    c_generate = add_command(do_generate, help='generate passwords')
    c_generate.add_argument('--length', default=12, type=int, help='password length (default: 12)')
    c_generate.add_argument('count', metavar='COUNT', nargs='?', type=int, help='number of passwords to generate')
    options = parser.parse_args()
    return options.action(options)

def fatal(message):
    prog = os.path.basename(sys.argv[0])
    print(
        '{prog}: error: {msg}'.format(prog=prog, msg=message),
        file=sys.stderr
    )
    sys.exit(1)

def parse_pick(s):
    if s is None:
        return str
    lst = []
    for item in s.split(','):
        if '-' in item:
            l, r = (int(x, 10) for x in item.split('-', 1))
        else:
            l = r = int(item, 10)
        if l < 1:
            raise IndexError('index should be a positive integer: {idx}'.format(idx=l))
        if l > r:
            raise IndexError('empty range: {l} > {r}'.format(l=l, r=r))
        lst += range(l - 1, r)
    return lambda p: ''.join(p[i] for i in lst)

def do_show(options):
    '''
    Read password file from standard input and output (some) passwords.
    The password file should be GPG-encrypted YAML file using the following
    structure:

       - site: https://example.net/
         user: j.r.hacker
         password: PnlUbPkPtq

       - site: https://example.org/
         user: jrh
         password: cUUZ4oUXFv

    '''
    try:
        pick_filter = parse_pick(options.pick)
    except (IndexError, ValueError) as exc:
        fatal('cannot parse --pick argument: {exc}'.format(exc=exc))
    gpg = ipc.Popen(['gpg', '-q', '-d'], stdout=ipc.PIPE)
    lines = yaml.safe_load(gpg.stdout)
    for item in lines or []:
        site = str(item['site'])
        if options.keyword not in site:
            continue
        password = str(item['password'])
        password = pick_filter(password)
        if '#' in password:
            continue
        user = str(item.get('user', '<none>'))
        xclip = None
        if options.omit:
            password = '<omitted>'
        elif options.x_clipboard:
            options.x_clipboard = False
            options.omit = True
            with open(os.devnull, 'w') as dev_null:
                xclip = ipc.Popen(['xclip', '-l', '1', '-verbose'],
                    stdin=ipc.PIPE,
                    stderr=dev_null,
                )
            xclip.stdin.write(password.encode('ASCII'))
            xclip.stdin.close()
            password = '<in-x-clipboard>'
        print('{site} ({user}) {password}'.format(
            site=site, user=user, password=password)
        )
        if xclip is not None:
            if xclip.wait() != 0:
                fatal('xclip failed')
    if gpg.wait() != 0:
        fatal('gpg failed')
    gpg.stdout.close()

def do_generate(options):
    '''
    Generate one or more passwords.

    The passwords use ASCII letters (a-z, A-Z) and digits (0-9).
    That is, they have
       lg (26 + 26 + 10) = 5.95
    bits of entropy per character.
    '''
    if options.count is None:
        options.count = 1
    alphabet = string.ascii_letters + string.digits
    chunk_bits = math.log(len(alphabet), 2) * options.length
    chunk_bits = int(math.ceil(chunk_bits))
    sysrandom = random.SystemRandom()
    for i in range(options.count):
        while True:
            bigint = sysrandom.getrandbits(chunk_bits)
            if bigint < len(alphabet) ** options.length:
                break
        password = [None] * options.length
        for j in range(options.length):
            bigint, password[j] = divmod(bigint, len(alphabet))
        assert bigint == 0
        password = ''.join(alphabet[ch] for ch in password)
        print(password)

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
